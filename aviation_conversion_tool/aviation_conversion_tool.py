# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AviationConversionTool
                                 A QGIS plugin
 Coordinate format, units of measure conversion
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-10-26
        git sha              : $Format:%H$
        copyright            : (C) 2020 by PaweÅ‚ Strzelewicz
        email                : pawel.strzelewicz@wp.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QWidget, QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *  # pylint: disable=unused-wildcard-import, wildcard-import
# Import the code for the dialog
from .aviation_conversion_tool_dialog import AviationConversionToolDialog

from .aviation_gis_tools.const import (
    AT_LATITUDE,
    AT_LONGITUDE
)
from .aviation_gis_tools.distance import Distance
from .aviation_gis_tools.coordinate import Coordinate
from .aviation_gis_tools.arinc424_coordinate_conversion import Arinc424CoordinatesConversion
from .aviation_gis_tools.speeds import convert_speed


class AviationConversionTool:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            f'AviationConversionTool_{locale}.qm')

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr('&AviationConversionTool')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('AviationConversionTool', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):  # pylint: disable=invalid-name
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/aviation_conversion_tool/icon.png'
        self.add_action(
            icon_path,
            text=self.tr('AviationConversionTool'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr('&AviationConversionTool'),
                action)
            self.iface.removeToolBarIcon(action)

    def distance_conversion(self):
        """Convert distance"""
        unit_from = self.dlg.comboBoxDistanceUOMInput.currentText()
        unit_to = self.dlg.comboBoxDistanceUOMOutput.currentText()
        d = Distance(src_dist=self.dlg.lineEditDistanceValueInput.text().strip(),
                     src_uom=unit_from)

        if d.is_valid:
            dist_output = round(d.convert_distance_to_uom(unit_to), 3)
            self.dlg.lineEditDistanceValueOutput.setText(f"{dist_output:.3f}")
        else:
            self.dlg.lineEditDistanceValueOutput.clear()
            QMessageBox.critical(QWidget(), "Message",
                                 f"Input value error: {self.dlg.lineEditDistanceValueInput.text()}. Number > 0 required!")

    def longitude_to_dd(self):
        """Convert Longitude from to decimal degrees format"""
        lon_src = self.dlg.lineEditLongitudeToDecimalInput.text().strip()
        lon = Coordinate(lon_src, AT_LONGITUDE)
        dd = lon.convert_to_dd()
        if dd is not None:
            self.dlg.lineEditLongitudeToDecimalOutput.setText(str(dd))
        else:
            self.dlg.lineEditLongitudeToDecimalOutput.clear()
            QMessageBox.critical(QWidget(), "Message",
                                 f"Input value error: {lon_src}. Not supported coordinate format "
                                 "or longitude error!")

    def latitude_to_dd(self):
        """Convert latitude to decimal degrees format"""
        lat_src = self.dlg.lineEditLatitudeToDecimalInput.text().strip()
        lat = Coordinate(lat_src, AT_LATITUDE)
        dd = lat.convert_to_dd()
        if dd is not None:
            self.dlg.lineEditLatitudeToDecimalOutput.setText(str(dd))
        else:
            self.dlg.lineEditLatitudeToDecimalOutput.clear()
            QMessageBox.critical(QWidget(), "Message",
                                 f"Input value error: {lat_src}. Not supported coordinate format "
                                 "or latitude error!")

    def longitude_to_dms(self):
        """Convert longitude to degrees, minutes, seconds format"""
        lon_src = self.dlg.lineEditLongitudeFromDecimalInput.text()
        lon = Coordinate(lon_src, AT_LONGITUDE)
        dd = lon.check_dd_format(lon_src, AT_LONGITUDE)

        if dd is None:
            self.dlg.lineEditLongitudeFromDecimalOutput.clear()
            QMessageBox.critical(QWidget(), "Message",
                                 f"Input value error: {lon_src}. Longitude in decimal degrees format expected!")
        else:
            lon_dms = lon.dd_to_dms_string(dd, AT_LONGITUDE)
            self.dlg.lineEditLongitudeFromDecimalOutput.setText(lon_dms)

    def latitude_to_dms(self):
        """Convert latitude to degrees, minutes, seconds format"""
        lat_src = self.dlg.lineEditLatitudeFromDecimalInput.text()
        lat = Coordinate(lat_src, AT_LATITUDE)
        dd = lat.check_dd_format(lat_src, AT_LATITUDE)

        if dd is None:
            self.dlg.lineEditLatitudeFromDecimalOutput.clear()
            QMessageBox.critical(QWidget(), "Message",
                                 f"Input value error: {lat_src}. Latitude in decimal degrees format expected!")
        else:
            lat_dms = lat.dd_to_dms_string(dd, AT_LATITUDE)
            self.dlg.lineEditLatitudeFromDecimalOutput.setText(lat_dms)

    def from_arinc424_conversion(self):
        """Convert from ARINC 424 'short-hand' coordinates to degrees, minutes format"""
        arinc = Arinc424CoordinatesConversion()

        arinc_code = self.dlg.lineEditFromArinc424Input.text().strip()
        lonlat = arinc.arinc424_to_coordinates(arinc_code)
        if lonlat:
            self.dlg.lineEditFromArinc424Output.setText(lonlat)
        else:
            self.dlg.lineEditFromArinc424Output.clear()
            QMessageBox.critical(QWidget(), "Message",
                                 f"Value {arinc_code} is not ARINC424 code for full degrees!")

    def to_arinc424_conversion(self):
        """Convert from  coordinates to degrees, minutes format to ARINC 424 'short-hand' coordinates"""
        arinc = Arinc424CoordinatesConversion()
        lon = self.dlg.lineEditToArinc424Longitude.text().strip()
        lat = self.dlg.lineEditToArinc424Latitude.text().strip()

        arinc_code = arinc.coord_to_arinc424(lon, lat)
        if arinc_code:
            self.dlg.lineEditToArinc424Output.setText(arinc_code)
        else:
            self.dlg.lineEditToArinc424Output.clear()
            QMessageBox.critical(QWidget(), "Message",
                                 "Longitude and latitude full degrees required!")

    def speed_conversion(self):
        """ Convert speeds"""
        unit_from = self.dlg.comboBoxSpeedUOMInput.currentText()
        unit_to = self.dlg.comboBoxSpeedUOMOutput.currentText()

        try:
            speed_from = float(self.dlg.lineEditSpeedValueInput.text().strip())

            if speed_from > 0:
                speed_to = round(convert_speed(speed_from, unit_from, unit_to), 3)
                self.dlg.lineEditSpeedValueOutput.setText(f"{speed_to:.3f}")
            else:
                QMessageBox.critical(QWidget(), "Message", "Number > 0 required!")
        except ValueError:
            self.dlg.lineEditSpeedValueOutput.clear()
            QMessageBox.critical(QWidget(), "Message", "Number > 0 required!")

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start:
            self.first_start = False
            self.dlg = AviationConversionToolDialog()

            self.dlg.pushButtonDistanceConversion.clicked.connect(self.distance_conversion)
            self.dlg.comboBoxDistanceUOMInput.currentIndexChanged.connect(self.distance_conversion)
            self.dlg.comboBoxDistanceUOMOutput.currentIndexChanged.connect(self.distance_conversion)
            self.dlg.lineEditDistanceValueInput.textChanged.connect(self.dlg.lineEditDistanceValueOutput.clear)

            self.dlg.pushButtonLongitudeToDDConversion.clicked.connect(self.longitude_to_dd)
            self.dlg.pushButtonLatitudeToDDConversion.clicked.connect(self.latitude_to_dd)

            self.dlg.pushButtonLongitudeFromDDConversion.clicked.connect(self.longitude_to_dms)
            self.dlg.lineEditLongitudeFromDecimalInput.textChanged.connect(self.dlg.lineEditLongitudeFromDecimalOutput.clear)
            self.dlg.pushButtonLatitudeFromDDConversion.clicked.connect(self.latitude_to_dms)
            self.dlg.lineEditLatitudeFromDecimalInput.textChanged.connect(self.dlg.lineEditLatitudeFromDecimalOutput.clear)

            self.dlg.pushButtonFromArinc424Conversion.clicked.connect(self.from_arinc424_conversion)
            self.dlg.pushButtonToArinc424Conversion.clicked.connect(self.to_arinc424_conversion)

            self.dlg.pushButtonSpeedConversion.clicked.connect(self.speed_conversion)
            self.dlg.comboBoxSpeedUOMInput.currentIndexChanged.connect(self.speed_conversion)
            self.dlg.comboBoxSpeedUOMOutput.currentIndexChanged.connect(self.speed_conversion)
            self.dlg.lineEditSpeedValueInput.textChanged.connect(self.dlg.lineEditSpeedValueOutput.clear)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
